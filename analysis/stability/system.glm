// TESS system response to 100MW loss of generation

module model;

clock 
{
    timezone "MST+7MDT";
    starttime "2020-01-01 00:00:00 MST";
    stoptime ${STOPTIME:-"2020-01-01 00:05:00 MST"};
}

#include "model.glm"

object system
{
    name "system";
    inertia 10 s;
    damping 1 pu;
    regulation 0 MW;
    frequency 60 Hz;
    supply 19950 MW;
    demand 20000 MW;
    ramp ${RAMP:-0 MW/h};
    noise "type:normal(0,${NOISE:-0}); refresh:3;";
    drift integrate(noise);
    Kp 0.02;
    Ki ($Kp/30);
    Kd ($Kp/10);
    power_price "type:normal(${POWER_AVG:-0},${POWER_STD:-0}); refresh:300; min:-100; max:1000;";
    energy_price "type:normal(${ENERGY_AVG:-0},${ENERGY_STD:-0}); refresh:3600; min:-100; max:1000;";
    ramp_price "type:normal(${RAMP_AVG:-0},${RAMP_STD:-0}); refresh:30; min:-100; max:1000;";
    object recorder
    {
        file "csv/system.csv";
        interval -1;
        property "frequency,supply,demand,regulation,drift,ramp,power_price,power_supply,power_demand,energy_price,energy_supply,energy_demand,ramp_price,ramp_supply,ramp_demand";
        flush 30;
    };
}

object feeder
{
    name "feeder";
    parent "system";
    capacity "20 MW";
    unresponsive_load "10 MW";
    responsive_load "0 MW";
    active_load "10 MW";
    object recorder
    {
        file "csv/feeder.csv";
        interval 5 min;
        property "capacity,unresponsive_load,responsive_load,active_load,cost,revenue,total";
    };
}

#if ${POWER_MARKET:-no}==yes
object power_market
{
    name "power";
    parent "feeder";
    interval 5 min;
    pricecap 200 $/MW/h;
    expected_avg ${POWER_AVG:-0} $/MW/h;
    expected_std ${POWER_STD:-0} $/MW/h;
    price 0 $/MW/h;
    quantity 0 MW;
    object recorder
    {
        file "csv/power.csv";
        interval 5 min;
        property "price,quantity,margin";
    };
    verbose "False";
}
#endif

#if ${ENERGY_MARKET:-no}==yes
object energy_market
{
    name "energy";
    parent "feeder";
    interval 1 hr;
    pricecap 10000 $/MW/h^2;
    expected_avg ${ENERGY_AVG:-0} $/MW/h^2;
    expected_std ${ENERGY_STD:-0} $/MW/h^2;
    price 0 $/MWh/h;
    quantity 0 MWh;
    object recorder
    {
        file "csv/energy.csv";
        interval 1 hr;
        property "price,quantity,margin";
    };
}
#endif

#if ${RAMP_MARKET:-no}==yes
object ramp_market
{
    name "ramp";
    parent "feeder";
    interval 30 s;
    pricecap 10000 $/MW;
    expected_avg ${RAMP_AVG:-0} $/MW;
    expected_std ${RAMP_STD:-0} $/MW;
    price 0 $/MW;
    quantity 0 MW/h;
    object recorder
    {
        file "csv/ramp.csv";
        interval 30 s;
        property "price,quantity,margin";
    };
}
#endif

object battery
{
    parent "feeder";
    capacity 10 kWh;
    rating 10 kW;
    energy random.triangle(2,8) kWh;
    setpoint 5 kWh;
    comfort 1.0;
    capital_cost 1.0 $/kWh;
    on_init python:model.battery_init;
}
