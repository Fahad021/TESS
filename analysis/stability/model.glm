// TESS Stability Analysis base model

class system
{
    int64 t0; // time of last dynamic update
    double inertia[s]; // dynamic inertia constant (M)
    double damping[pu]; // dynamic model damping coefficient (D)
    double regulation[MW]; // regulation response (u)
    double supply[MW]; // scheduled generation
    double demand[MW]; // scheduled load
    double ramp[MW/h]; // scheduled ramp rate
    double reserve[MWh]; // scheduled reserve requirement
    randomvar noise[MW]; // load noise disturbance (normally distributed)
    double drift[MW]; // load drift (integral of noise)
    double frequency[Hz]; // system frequency
    double Kp; // system frequency proportional control coefficient
    double Ki; // system frequency integral control coefficient
    double Kd; // system frequency derivative control coefficient
    double intfreq; // system frequency integral error
    randomvar power_price[$/MW/h]; // market power price
    double power_supply[MW]; // market power supply
    double power_demand[MW]; // market power demand
    randomvar energy_price[$/MW/h^2]; // market energy price
    double energy_supply[MWh]; // market energy supply
    double energy_demand[MWh]; // market energy demand
    randomvar ramp_price[$/MW]; // market ramp price
    double ramp_supply[MW/h]; // market ramp supply
    double ramp_demand[MW/h]; // market ramp demand
}

class feeder
{
    int64 t0; // time of last dynamic update
    double capacity[MW]; // feeder capacity limit
    double unresponsive_load[MW]; // feeder unresponsive load
    double responsive_load[MW]; // feeder responsive load
    double active_load[MW]; // feeder active load
    double cost[$]; // feeder cumulative cost (payments to system)
    double revenue[$]; // feeder cumulative revenue (payments from loads)
    double total[$]; // feeder total net cost (revenue)
}

class power_market
{
    double interval[s]; // auction clear interval
    double expected_avg[$/MW/h]; // expected average of power price
    double expected_std[$/MW/h]; // expected standard deviation of power price 
    double price[$/MW/h]; // last auction price
    double quantity[MW]; // last auction quantity
    double pricecap[$/MW/h]; // last price cap
    double margin[pu]; // last clearing margin
    char1024 verbose; // verbose output file (TRUE for terminal output)
}

class energy_market
{
    double interval[s]; // auction clear interval
    double price[$/MW/h^2]; // last auction price
    double quantity[MWh]; // last auction quantity
    double pricecap[$/MW/h^2]; // last price cap
    double margin[pu]; // last clearing margin
    char1024 verbose; // verbose output file (TRUE for terminal output)
}

class ramp_market
{
    double interval[s]; // auction clear interval
    double price[$/MW]; // last auction price
    double quantity[MW/h]; // last auction quantity
    double pricecap[$/MW]; // last price cap
    double margin[pu]; // last clearing margin
    char1024 verbose; // verbose output file (TRUE for terminal output)
}

class battery
{
    int64 t0; // time of last dynamic update
    double capacity[MWh]; // total energy capacity of battery
    double rating[MW]; // power rating of battery
    double energy[MWh]; // current energy stored in battery
    double power[MW]; // current power input (output is negative) 
    double ramp[MW/h]; // current ramp rate setting of battery
    double capital_cost[$/MWh]; // power price deadband (offer-ask)
    double setpoint[MWh]; // battery desired charge level
    double comfort; // battery charge comfort
    double buy_price[$/MWh]; // current asking (buy) price for power
    double sell_price[$/MWh]; // current offer (sell) price for power
}

class photovoltaic
{

}

class hvac
{

}

class hotwater
{

}

class vehicle
{

}